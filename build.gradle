plugins {
    id 'java'
    // Shadow
    id "io.github.goooler.shadow" version "8.1.7"
}

group = 'net.malfact'
version = '1.0.9-SNAPSHOT'

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

repositories {
    mavenCentral()
    // Paper
    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    // CommandAPI
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
    // PlaceholderAPI
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }

    // Luaj2
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/malfact/luaj")
        credentials {
            username = properties.getProperty("gpr.user")
            password = properties.getProperty("gpr.key")
        }
    }
}

def luaj2 = "net.malfact.luaj:luaj2:1.1.0"

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.20.6-R0.1-SNAPSHOT"
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly "dev.jorel:commandapi-bukkit-core:9.4.2"
    implementation luaj2
//    implementation fileTree(dir: 'lib', include: '*.jar')
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

shadowJar {
    dependencies {
        include(dependency(luaj2))
    }
    archiveClassifier.set('')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

tasks.register('deleteOldCopy', Delete) {
    def copyToDir = properties.getProperty("copy-build-dir")
    if (copyToDir == null)
        return

    delete(fileTree(copyToDir).matching {
        include "${rootProject.name}**.jar"
    }.files)

    println("Deleted old Jars")
}

tasks.register('copyJarTo', Copy) {
    def copyToDir = properties.getProperty("copy-build-dir")
    if (copyToDir == null)
        return

    dependsOn(deleteOldCopy)
    dependsOn(shadowJar)
    from shadowJar
    into copyToDir
    println("Copied Jars to ${copyToDir}")
}